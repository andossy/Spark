#!/usr/bin/env python
# -*- coding: utf-8 -*-

import os
import sys
from string import upper

from fcg.loadmodel import load_model
from fcg.codegeneration import CCodeGenerator

def main(input_filename, params):
    """
    Create .c and .h files from a flux model.
    """

    # Load a model
    flux = load_model(input_filename, params.symbols)

    # Create a C code generator
    gen = CCodeGenerator(params)

    print 'Generating C code for boundary fluxes defined in %s ...' % input_filename,
    h_code, c_code = gen.module_code(flux)
    print ' done.'

    filename = params.output+'.h'
    with open(filename, 'w') as h_file:
        # write guards
        guard = '__'+upper(filename).replace('.','_')
        h_file.write('#ifndef '+guard+'\n')
        h_file.write('#define '+guard+'\n\n')

        # write includes
        h_file.write("#include <mpi.h>\n")
        h_file.write('#include "types.h"\n')
        h_file.write('#include "basefluxinfo.h"\n\n')

        # write the code
        h_file.write(h_code)

        # write endif
        h_file.write('\n#endif')

        # write an empty line at the end
        h_file.write('\n')

    filename = params.output+'.c'
    with open(filename, 'w') as c_file:
        # write includes
        c_file.write("#include <assert.h>\n")
        c_file.write("#include <math.h>\n")
        c_file.write("\n")

        c_file.write('#include "mtwist.h"\n')
        c_file.write('#include "utils.h"\n')
        c_file.write('#include "geometry.h"\n')
        c_file.write('#include "species.h"\n')
        c_file.write('#include "options.h"\n')

        c_file.write('#include "%s.h"\n\n' % params.output)

        # write the code
        c_file.write(c_code)

        # write an empty line at the end
        c_file.write('\n')

if __name__ == '__main__':
#    from modelparameters.parameterdict import ParameterDict, Param

    generation_params = CCodeGenerator.default_parameters()

    if len(sys.argv) != 2:
        raise RuntimeError('*** Error: Expected a single file to flux definition.')

    if not os.path.isfile(sys.argv[1]):
        raise IOError('*** Error: Expected the argument to be a file.')

    main(sys.argv[1], generation_params)
